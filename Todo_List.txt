Todo List / Design Speculations 
Document:
    [ ] y get system info
    [ ] ( load semantics
    [ ] ) unload semantics
    [ ] = execute
    [ ] i input file
    [ ] o output file
    [ ] t split (IP)
    [ ] u stack under stack
    [ ] z no op
    [ ] { begin block
    [ ] } end block
Write Tests:
    [x] x absolute delta
        [ ] Write tests for beyond standard functionality
    [ ] @ end the current IP
        [x] Well implementing it didn't break anything... 
    [x] j jump forward
    [ ] k iterate
    [x] ' fetch character
        [ ] write more extensive tests, including: 
              [ ] landing on a trampoline
              [ ] jumping over an edge
    [ ] get system info tests
    [ ] ( load semantics
    [ ] ) unload semantics
    [ ] = execute
    [ ] i input file
    [ ] o output file
    [ ] t split (IP)
    [ ] u stack under stack
    [ ] z no op
    [ ] { begin block
    [ ] } end block
Implement:
    [x] k iterate
    [ ] # get system info
    [ ] ( load semantics
    [ ] ) unload semantics
    [ ] = execute
    [ ] i input file
    [ ] o output file
    [ ] t split (IP)
    [ ] u stack under stack
    [ ] z no op
    [ ] { begin block
    [ ] } end block
Other:
    [ ] treat spaces "SGML-style" (ie, use only one tick to process multiple spaces, and count multiple contiguous spaces as only 1 space)
    [ ] alphabetize ruleset
    [ ] alphabetize instruction functions
    [ ] match function names to Befunge spec instruction names
    [ ] implement a run(funge_space)method, that takes a funge space as an argument, so different programs can be run without needing to start and stop the (python)interpreter, should be backwards compatible with current functionality
    [ ] format this document so that it doesn't rely on my narrow 45 column with word wrap width. 
[ ] Add concurrency features  
    [ ] address IP.active checking slow down issues 
Fingerprints (subject to change):
    1.) extensions will be written in python 
    2.) fingerprint subdirectory
    3.) path for importing: ./ then ./fingerprint
    4.) file extension: .fp.py